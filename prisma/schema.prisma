generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  PLAYER
  AGENT
  ADMIN
  SUB_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  ContestEntries  ContestEntry[]
  Bets            Bet[]
  username        String?           @unique
  phone           BigInt?
  DOB             DateTime?
  isFirstDeposit  Boolean           @default(true)
  // Username of the other user
  referral        String?
  Wallets         Wallets[]
  Sessions        Session[]
  Transactions    Transaction[]
  firstname       String?
  lastname        String?
  address1        String?
  address2        String?
  city            String?
  state           String?
  postalCode      String?
  identityStatus  Boolean           @default(false)
  reasonCodes     String[]
  isAdmin         Boolean           @default(false)
  type            UserType          @default(PLAYER)
  agentId         String?
  agent           Agent?            @relation(fields: [agentId], references: [id], onDelete: Cascade)
  // List of users referrals under the agent
  UserAsAgents    Agent[]           @relation("UserAsAgent")
  referralCodes   ReferralCode[]
  UserAppSettings UserAppSettings[]
  permissions     Permission[]      @relation("PermissionUser")
  status          UserStatus        @default(ACTIVE)
  //  List of agents assigned to the Sub-admin user -
  SubAdminAgents  Agent[]           @relation("SubAdminUser") // @deprecated - use AgentSubAdmins instead
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  timezone        String?           @default("America/New_York")
  notes           String?
  smsLogs         SmsLog[]
  exemptedReasonCodes String[]
  UserBonusCreditLimits UserBonusCreditLimit[]
  UserAgents UserAgent[]
  // List of PAMs assigned to manage the partner (agent)
  AgentSubAdmins AgentSubAdmin[]    @relation("AgentSubAdmin")
}

model ContestEntry {
  id                   String                @id @default(uuid())
  contest              Contest               @relation(fields: [contestsId], references: [id], onDelete: Cascade)
  bets                 Bet[]
  tokens               Decimal
  User                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  contestsId           String
  transactions         Transaction[]
  DepositDistributions DepositDistribution[]
}

enum BetStatus {
  PENDING
  WIN
  LOSS
  PUSH
  CANCELLED
  REFUNDED
}

enum BetType {
  TEASER
  STRAIGHT
  PARLAY
}

enum BetLegType {
  OVER_ODDS
  UNDER_ODDS
  SPREAD_AWAY_ODDS
  SPREAD_HOME_ODDS
  MONEYLINE_AWAY_ODDS
  MONEYLINE_HOME_ODDS
}

model BetLeg {
  id     String     @id @default(uuid())
  market Market     @relation(fields: [marketId, marketSel_id], references: [id, sel_id])
  type   BetLegType
  odds   Decimal
  total  Decimal
  status BetStatus  @default(PENDING)

  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  marketId     String
  marketSel_id Int
  Bet          Bet?     @relation(fields: [betId], references: [id], onDelete: Cascade)
  betId        String?
}

model Bet {
  id                   String                @id @default(uuid())
  stake                Decimal               @db.Decimal(10, 2)
  cashStake            Decimal               @default(0) @db.Decimal(10, 2)
  bonusCreditStake     Decimal               @default(0) @db.Decimal(10, 2)
  status               BetStatus
  owner                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  payout               Decimal               @db.Decimal(10, 2)
  type                 BetType
  legs                 BetLeg[]
  odds                 Int
  ContestEntries       ContestEntry          @relation(fields: [contestEntriesId], references: [id], onDelete: Cascade)
  contestEntriesId     String
  userId               String
  ContestCategory      ContestCategory       @relation(fields: [contestCategoryId], references: [id], onDelete: Cascade)
  contestCategoryId    String
  stakeType            BetStakeType
  DepositDistributions DepositDistribution[]
  Transactions         Transaction[]
  created_at           DateTime              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime              @default(now()) @updatedAt @db.Timestamptz(6)
}

enum BetStakeType {
  ALL_IN
  INSURED
}

enum ContestWagerType {
  TOKEN
  CASH
}

model Contest {
  id             String         @id @default(uuid())
  name           String         @db.VarChar(255)
  description    String
  // Whether or not a contest can be joined
  isActive       Boolean
  // Date of which the contest can be played in
  startDate      DateTime       @db.Timestamptz(6)
  // Date of which no more bets can be placed in this contest
  endDate        DateTime       @db.Timestamptz(6)
  type           ContestType
  bgImageUrl     String         @db.VarChar(255)
  ContestEntries ContestEntry[]

  created_at DateTime         @default(now()) @db.Timestamptz(6)
  updated_at DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
  Wallets    Wallets[]
  entryFee   Decimal
  totalPrize Decimal
  wagerType  ContestWagerType @default(TOKEN)
  priority   Int              @default(autoincrement())
}

enum League {
  NFL
  MLB
  NBA
  NCAAB
  NCAAF
  NHL
  TENNIS
  GOLF
  SOCCER
  MMA
  CSGO
  NASCAR
  F1
  KBO
  BOXING
  DOTA2
  LOL
  COD
  VALORANT
  USFL
  WNBA
  CRICKET
  NBA1H
  NBA1Q
  CFL
  NFL1H
  NFL1Q
  NFL2H
  BASKETBALL
}

enum Status {
  Scheduled
  InProgress
  Final
  PostponedCanceled
}

model Team {
  id       String   @id
  name     String
  code     String
  homeTeam Offer[]  @relation("homeTeam")
  awayTeam Offer[]  @relation("awayTeam")
  Market   Market[]
  Players  Player[]
}

enum MarketType {
  GM
  GP
  PP
}

enum MarketResult {
  One
  Zero
  Null
}

model Player {
  id       String   @id
  name     String
  position String
  teamid   String
  team     String
  Market   Market[]
  Team     Team?    @relation(fields: [teamid], references: [id], onDelete: Cascade)
  headshot String?
}

model Market {
  id               String
  // team id or player id
  team             Team?        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  player           Player?      @relation(fields: [playerId], references: [id], onDelete: Cascade)
  sel_id           Int
  type             MarketType
  category         String
  name             String
  teamAbbrev       String
  offline          Boolean
  spread           Float?
  spread_odd       Float?
  total            Float?
  over             Float?
  under            Float?
  moneyline        Float?
  spread_bet       Float?
  spread_cash      Float?
  over_bet         Float?
  under_bet        Float?
  over_cash        Float?
  under_cash       Float?
  moneyline_bet    Float?
  moneyline_cash   Float?
  spread_result    MarketResult
  spread_stat      Float?
  over_result      MarketResult
  under_result     MarketResult
  total_stat       Float?
  moneyline_result MarketResult
  moneyline_stat   Float?
  offer            Offer?       @relation(fields: [offerId], references: [gid], onDelete: Cascade)
  offerId          String?
  teamId           String?
  playerId         String?
  BetLeg           BetLeg[]
  FreeSquare       FreeSquare?  @relation(fields: [freeSquareId], references: [id], onDelete: Cascade)
  freeSquareId     String?      @unique
  created_at       DateTime     @default(now()) @db.Timestamptz(6)
  updated_at       DateTime     @default(now()) @updatedAt @db.Timestamptz(6)
  MarketOverride   MarketOverride?  @relation(fields: [marketOverrideId], references: [id], onDelete: Cascade)
  marketOverrideId String?      @unique
  active           Boolean      @default(true)

  @@id([id, sel_id])
}

model Offer {
  gid       String   @id
  league    League
  gamedate  String
  epoch     Int
  start_utc String?
  end_utc   String?
  inplay    Boolean
  status    Status
  matchup   String
  gametime  String
  home      Team     @relation("homeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  away      Team     @relation("awayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  markets   Market[]

  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  homeTeamId  String
  awayTeamId  String
  manualEntry Boolean  @default(false)
  TournamentEvent       TournamentEvent?   @relation(fields: [tournamentEventId], references: [id], onDelete: Cascade)
  tournamentEventId     String?
}

enum ContestType {
  MATCH
  FANTASY
}

// For in-house purposes
model AppSettings {
  id     String         @id @default(uuid())
  name   AppSettingName @unique
  value  String
  banner Banner?
}

model UserAppSettings {
  id     String         @id @default(uuid())
  name   AppSettingName
  value  String
  User   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId, name])
}

enum AppSettingName {
  // Limit for matching the first deposit
  MAX_MATCH_DEPOSIT_AMOUNT
  // Credit amount for firt successful deposit of referral
  REFERRAL_CREDIT_AMOUNT
  // Custom referral text
  REFERRAL_CUSTOM_TEXT
  // Reload bonus
  RELOAD_BONUS_AMOUNT
  // Deposit amount options
  DEPOSIT_AMOUNT_OPTIONS
  // Minimum bet amount
  MIN_BET_AMOUNT
  // Maximum bet amount
  MAX_BET_AMOUNT
  // Reload bonus type ie. FLAT or PERCENTAGE
  RELOAD_BONUS_TYPE
  // Minimum market odds
  MIN_MARKET_ODDS
  // Maximum market odds
  MAX_MARKET_ODDS
  // Maximum retention bonus when the user keeps the withdrawable balance on site
  MAX_RETENTION_BONUS
  // How many times a week the user can see the retention bonus offer pops up
  RETENTION_BONUS_WEEKLY_CHANCE
  // Match the available cash balace to withdraw to x times if the user accepts the offer
  RETENTION_BONUS_MATCH_MULTIPLIER
  // Number of players/picks required in a bonus credit free entry
  NUMBER_OF_PLAYERS_FREE_ENTRY
  // Stake type applicable to the bonus credit free entry i.e. INSURED / ALL_IN
  STAKE_TYPE_FREE_ENTRY
  // Bonus credit amount to convert as 1 free entry
  BONUS_CREDIT_FREE_ENTRY_EQUIVALENT
  // The promo message shown in the challenge page
  CHALLENGE_PROMO_MESSAGE
  // Limit for repeating the same offers in an entry
  REPEAT_ENTRIES_LIMIT
  // Automatic signup free entry
  SIGNUP_FREE_ENTRY
  // Maximum daily total bet amount
  MAX_DAILY_TOTAL_BET_AMOUNT
  // Max Limit on Weekly Referral Bonus Credit Earned
  WEEKLY_REFERRAL_MAX_AMOUNT_EARNED
  // Home page heading 1
  HOMEPAGE_HEADING_1
  // Home page heading 2
  HOMEPAGE_HEADING_2
  // Automatic approve if the user has this many successful deposits
  ACH_DEPOSIT_AUTO_APPROVE_COUNT
  // Minimum deposit amount
  MIN_DEPOSIT_AMOUNT
}

model Wallets {
  id                        String  @id @default(uuid())
  User                      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest                   Contest @relation(fields: [contestsId], references: [id], onDelete: Cascade)
  balance                   Decimal @db.Decimal(10, 2)  @default(0)
  cashBalance               Decimal @db.Decimal(10, 2)  @default(0)
  bonusCredits              Decimal @db.Decimal(10, 2)  @default(0)
  amountAvailableToWithdraw Decimal @db.Decimal(10, 2)  @default(0)
  unPlayedAmount            Decimal @db.Decimal(10, 2)  @default(0)
  userId                    String
  contestsId                String

  created_by String
  updated_by String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@unique([userId, contestsId])
}

model Session {
  id                        String            @id @default(uuid())
  serviceType               String
  User                      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String
  deviceLocation            String
  sessionRequestRaw         String?
  completeSessionRequestRaw String?
  SessionResponses          SessionResponse[]
  Transactions              Transaction[]
  created_at                DateTime          @default(now()) @db.Timestamptz(6)
}

model SessionResponse {
  id                 String   @id @default(uuid())
  Session            Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId          String
  reasonCodes        String[]
  sessionResponseRaw String
  statusCode         Int
  statusMessage      String
  created_at         DateTime @default(now()) @db.Timestamptz(6)
  updated_at         DateTime @default(now()) @updatedAt @db.Timestamptz(6)
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum PaymentMethodType {
  CC
  ACH
  Paypal
  OTHERS
}

model Transaction {
  id                   String                @id
  actionType           String
  Session              Session               @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId            String
  User                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  amountProcess        Decimal
  amountBonus          Decimal
  transactionCurrency  String //USD or other ISO 4217 Currency Code
  created_at           DateTime              @default(now()) @db.Timestamptz(6)
  TransactionStatuses  TransactionStatus[]
  ContestEntry         ContestEntry?         @relation(fields: [contestEntryId], references: [id], onDelete: Cascade)
  contestEntryId       String?
  DepositDistributions DepositDistribution[]
  betId                String?               @unique
  Bet                  Bet?                  @relation(fields: [betId], references: [id], onDelete: Cascade)
}

model TransactionStatus {
  id                       String            @id @default(uuid())
  Transaction              Transaction       @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId            String
  statusCode               Int
  statusMessage            String?
  transactionType          TransactionType
  transactionScore         Decimal
  // Text description of the payment method used by the customer.
  transactionMethod        String
  transactionMethodType    PaymentMethodType
  //Account of the payment method used: VISA, MC, AMEX, PAYPAL, etc.
  transactionMethodAccount String
  approvalDateTime         DateTime
  statusDateTime           DateTime
  processDateTime          DateTime?
  created_at               DateTime          @default(now()) @db.Timestamptz(6)
  updated_at               DateTime          @default(now()) @updatedAt @db.Timestamptz(6)
}

model ContestCategory {
  id                               String @id @default(uuid())
  numberOfPicks                    Int
  allInPayoutMultiplier            Float
  primaryInsuredPayoutMultiplier   Float
  secondaryInsuredPayoutMultiplier Float
  Bets                             Bet[]
  FreeSquareContestCategories      FreeSquareContestCategory[]
  customStakeLimitEnabled          Boolean? @default(false)
  minStakeAmount                   Decimal?
  maxStakeAmount                   Decimal?
  contestCategoryLeagueLimits      ContestCategoryLeagueLimit[]
  bonusCreditLimit                 BonusCreditLimit? @relation(fields: [bonusCreditLimitId], references: [id], onDelete: Cascade)
  bonusCreditLimitId               String? @unique
}

model BonusCreditLimit {
  id                               String                 @id @default(uuid())
  enabled                          Boolean?               @default(false)
  contestCategory                  ContestCategory?
  stakeTypeOptions                 BetStakeType[]
  bonusCreditFreeEntryEquivalent   Decimal                @default(0)
  UserBonusCreditLimits            UserBonusCreditLimit[]
}

model UserBonusCreditLimit {
  id                               String           @id @default(uuid())
  enabled                          Boolean?         @default(false)
  bonusCreditLimit                 BonusCreditLimit @relation(fields: [bonusCreditLimitId], references: [id], onDelete: Cascade)
  bonusCreditLimitId               String
  User                             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                           String
  stakeTypeOptions                 BetStakeType[]
  bonusCreditFreeEntryEquivalent   Decimal          @default(0)

  @@unique([userId, bonusCreditLimitId])
}

// To determine how much the user can withdraw without payout request approval
model DepositDistribution {
  id             String        @id @default(uuid())
  Transaction    Transaction   @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId  String
  Bet            Bet?          @relation(fields: [betId], references: [id], onDelete: Cascade)
  betId          String?
  ContestEntry   ContestEntry? @relation(fields: [contestEntryId], references: [id], onDelete: Cascade)
  contestEntryId String?
  amount         Decimal
  created_at     DateTime      @default(now()) @db.Timestamptz(6)
}

model ContactUs {
  id          String   @id @default(uuid())
  name        String
  email       String
  phoneNumber String
  category    String
  description String
  emailSent   Boolean  @default(false)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
}

model Banner {
  id            String        @id @default(uuid())
  text          String
  priority      Int           @default(autoincrement())
  appSetting    AppSettings?  @relation(fields: [appSettingId], references: [id], onDelete: Cascade)
  appSettingId  String?       @unique
  created_at    DateTime      @default(now()) @db.Timestamptz(6)
  updated_at    DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
}

model SpecialRestriction {
  id                 String   @id @default(uuid())
  code               String
  description        String?
  blockedReasonCodes String[]
  blockedLeagues     League[]
  created_at         DateTime @default(now()) @db.Timestamptz(6)
  updated_at         DateTime @default(now()) @updatedAt @db.Timestamptz(6)
}

model ReferralCode {
  id     String @id @default(uuid())
  code   String @unique
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Agent {
  id     String @id @default(uuid())
  userId String @unique
  User   User   @relation(name: "UserAsAgent", fields: [userId], references: [id], onDelete: Cascade)
  users  User[]
  subAdminId    String? // @deprecated - use AgentSubAdmin instead to support multiple sub-admins managing the same agent
  subAdminUser  User?   @relation(name: "SubAdminUser", fields: [subAdminId], references: [id], onDelete: Cascade) // @deprecated - use AgentSubAdmin instead
  UserAgents UserAgent[]
  AgentSubAdmins AgentSubAdmin[]
}

model UserAgent {
  id     String @id @default(uuid())
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  agentId String
  Agent   Agent   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  @@unique([userId, agentId])
}

model AgentSubAdmin {
  id     String @id @default(uuid())
  agentId String
  Agent   Agent   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  subAdminId    String
  subAdminUser  User   @relation(name: "AgentSubAdmin", fields: [subAdminId], references: [id], onDelete: Cascade)
  @@unique([agentId, subAdminId])
}

model FreeSquare {
  id                String     @id @default(uuid())
  discount          Decimal
  // Maximum stake amount
  maxStake          Decimal   @default(0)
  // Option to allow Free Square in a Free Entry (bonus credit stake entry)
  freeEntryEnabled  Boolean    @default(false)
  market            Market?
  // Only use the free square on selected 2 picks, or 3 picks etc.
  FreeSquareContestCategory  FreeSquareContestCategory[]
  created_at        DateTime   @default(now()) @db.Timestamptz(6)
  updated_at        DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
}

model FreeSquareContestCategory {
  id                String     @id @default(uuid())
  freeSquare        FreeSquare @relation(fields: [freeSquareId], references: [id], onDelete: Cascade)
  contestCategory   ContestCategory @relation(fields: [contestCategoryId], references: [id], onDelete: Cascade)
  freeSquareId      String
  contestCategoryId String

  @@unique([freeSquareId, contestCategoryId])
}

model Permission {
  id          String       @id @default(uuid())
  read        Boolean
  write       Boolean
  module      Module       @relation("PermissionModule", fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId    String
  user        User         @relation("PermissionUser", fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@unique([moduleId, userId])
}

enum ModuleName {
  MANAGEMENT_INSERT_BONUS_CREDIT
  MANAGEMENT_AMOUNT_AVAILABLE_TO_WITHDRAW
  MANAGEMENT_MANUALLY_ENTER_OFFER_LINES
  MANAGEMENT_MANUALLY_ENTER_TOURNAMENT_OFFER_LINES
  MANAGEMENT_BALANCE_BY_USER_ID
  MANAGEMENT_UPDATE_USERS_LIMITS
  MANAGEMENT_CONTENT
  MANAGEMENT_WITHDRAWAL_OFFER
  MANAGEMENT_ADD_REMOVE_FREE_SQUARE_PROMOTIONS
  MANAGEMENT_AGENT_REFERRAL_CODES
  MANAGEMENT_BONUS_CREDIT_LIMITS
  MANAGEMENT_SEND_SMS
  MANAGEMENT_APPSETTINGS
  MANAGEMENT_MANAGE_USER_PERMISSIONS
  MANAGEMENT_MANAGE_USERS
  MANAGEMENT_PARTNERS_PAMS
  MANAGEMENT_LIST_OFFERS
  MANAGEMENT_VIEW_BETS
  MANAGEMENT_MARKET_CATEGORIES
  MANAGEMENT_MONTHLY_USER_CONVERSION
  MANAGEMENT_LEAGUES
  FIGURES_WEEKLY_BALANCE
  FIGURES_LINE_EXPOSURES
  FIGURES_PLAYER_TOTALS_BY_RANGE
  FIGURES_VIEW_PICKS_BY_USER
  FIGURES_TSEVO_BILLING
  FIGURES_USER_PERFORMANCE_BY_SPORT
  FIGURES_USER_PERFORMANCE_BY_PICKS
  FIGURES_USER_PERFORMANCE_BY_SPORT_AND_CATEGORY
  FIGURES_MONTHLY_USER_CONVERSION
  FIGURES_MONTHLY_BALANCE
  FIGURES_USERS_DEPOSITS_WITHDRAWALS
  ACTION_DELETE_PICKS
  ACTION_VIEW_BETS
}

model Module {
  id          String          @id @default(uuid())
  name        ModuleName      @unique
  description String?
  urlPath     String?
  permissions Permission[]    @relation("PermissionModule")
  active      Boolean         @default(true)
}

model MarketOverride {
  id            String   @id @default(uuid())
  market        Market?
  total         Float?
  over          Float?
  under         Float?
  adjustedTotal Float?
  adjustedOver  Float?
  adjustedUnder Float?
  active        Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @updatedAt @db.Timestamptz(6)
}

model LeagueLimit {
  id          String          @id @default(uuid())
  league      League          @unique
  // Option to limit the league
  enabled     Boolean         @default(false)
  // Maximum league stake amount
  maxStake    Decimal         @default(0)
  // Minimum league stake amount
  minStake    Decimal         @default(0)
  // Limit to the number of selections per team on a single ticket/entry
  teamSelectionLimit Decimal  @default(0)
  contestCategoryLeagueLimits ContestCategoryLeagueLimit[]
}

model TournamentEvent {
  id            String          @id @default(uuid())
  name          String
  Offers        Offer[]
  league        League
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @updatedAt @db.Timestamptz(6)
}


model ContestCategoryLeagueLimit {
  id                               String          @id @default(uuid())
  enabled                          Boolean         @default(false)
  ContestCategory                  ContestCategory @relation(fields: [contestCategoryId], references: [id], onDelete: Cascade)
  contestCategoryId                String
  LeagueLimit                      LeagueLimit     @relation(fields: [leagueLimitId], references: [id], onDelete: Cascade)
  leagueLimitId                    String
  allInPayoutMultiplier            Float
  primaryInsuredPayoutMultiplier   Float
  secondaryInsuredPayoutMultiplier Float

  @@unique([contestCategoryId, leagueLimitId])
}


enum SmsStatus {
  NEW
  PENDING
  FAILED
  SUCCESS
}

model SmsLog {
  id          String    @id @default(uuid())
  userId      String
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  message     String
  reason      String?
  status      SmsStatus @default(NEW)
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
}

model MarketCategory {
  id        String  @id @default(uuid())
  category  String
  league    League
  order     Int?
}

model LeagueCategory {
  id        String  @id @default(uuid())
  league    League  @unique
  order     Int?
}

model LeaguesMarketCount {
  id        String  @id @default(uuid())
  league    League  @unique
  count     Int?
  updated_at  DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
}

model ListOffer {
  id        String  @id @default(uuid())
  league    League  @unique
  jsonData  Json?
  updated_at  DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
}
