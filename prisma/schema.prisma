generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  ContestEntries ContestEntry[]
  Bets           Bet[]
  username       String?        @unique
  state          String?
  phone          Int?
  DOB            DateTime?
}

model ContestEntry {
  id         String  @id @default(uuid())
  contest    Contest @relation(fields: [contestsId], references: [id])
  bets       Bet[]
  tokens     Decimal
  User       User    @relation(fields: [userId], references: [id])
  userId     String
  contestsId String
}

enum BetStatus {
  PENDING
  WIN
  LOSS
  PUSH
}

enum BetType {
  TEASER
  STRAIGHT
  PARLAY
}

enum BetLegType {
  OVER_ODDS
  UNDER_ODDS
  SPREAD_AWAY_ODDS
  SPREAD_HOME_ODDS
  MONEYLINE_AWAY_ODDS
  MONEYLINE_HOME_ODDS
}

model BetLeg {
  id             String     @id @default(uuid())
  offer          Offer      @relation(fields: [offersId], references: [gid])
  type           BetLegType
  odds           Int
  total          Int
  spreadHomeLine Int
  spreadAwayLine Int
  offersId       String

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
}

model Bet {
  id               String       @id @default(uuid())
  stake            Decimal      @db.Decimal(10, 2)
  status           BetStatus
  owner            User         @relation(fields: [userId], references: [id])
  payout           Decimal      @db.Decimal(10, 2)
  type             BetType
  legs             Json         @default("\"[]\"")
  odds             Int
  ContestEntries   ContestEntry @relation(fields: [contestEntriesId], references: [id])
  contestEntriesId String
  userId           String

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
}

model Contest {
  id             String         @id @default(uuid())
  name           String         @db.VarChar(255)
  description    String
  // Whether or not a contest can be joined
  isActive       Boolean
  // Date of which the contest can be played in
  startDate      DateTime       @db.Timestamptz(6)
  // Date of which no more bets can be placed in this contest
  endDate        DateTime       @db.Timestamptz(6)
  type           String         @db.VarChar(255)
  bgImageUrl     String         @db.VarChar(255)
  ContestEntries ContestEntry[]

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
}

enum League {
  NFL
  MLB
  NBA
  NCAAB
  NCAAF
  NHL
}

enum Status {
  Scheduled
  InProgress
  Final
  PostponedCanceled
}

model Team {
  id       Int      @id
  name     String
  code     String
  homeTeam Offer[]  @relation("homeTeam")
  awayTeam Offer[]  @relation("awayTeam")
  Market   Market[]
}

enum MarketType {
  GM
  GP
  PP
}

enum MarketResult {
  One
  Zero
  Null
}

model Player {
  id       Int      @id
  name     String
  position String
  teamid   Int
  team     String
  Market   Market[]
}

model Market {
  id               String       @id
  // team id or player id
  team             Team?        @relation(fields: [teamId], references: [id])
  player           Player?      @relation(fields: [playerId], references: [id])
  type             MarketType
  category         String
  name             String
  teamAbbrev       String
  offline          Boolean
  spread           Float?
  spread_odd       Float?
  total            Float?
  over             Float?
  under            Float?
  moneyline        Float?
  spread_bet       Float?
  spread_cash      Float?
  over_bet         Float?
  under_bet        Float?
  over_cash        Float?
  under_cash       Float?
  moneyline_bet    Float?
  moneyline_cash   Float?
  spread_result    MarketResult
  spread_stat      Float?
  over_result      MarketResult
  under_result     MarketResult
  total_stat       Float?
  moneyline_result MarketResult
  moneyline_stat   Float?
  offer            Offer?       @relation(fields: [offerId], references: [gid])
  offerId          String?
  teamId           Int?
  playerId         Int?
}

model Offer {
  gid       String   @id
  league    League
  gamedate  String
  epoch     Int
  start_utc String?
  end_utc   String?
  inplay    Boolean
  status    Status
  matchup   String
  gametime  String
  home      Team     @relation("homeTeam", fields: [homeTeamId], references: [id])
  away      Team     @relation("awayTeam", fields: [awayTeamId], references: [id])
  markets   Market[]

  BetLeg BetLeg[]

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  homeTeamId Int
  awayTeamId Int
}

enum ContestType {
  MATCH
  FANTASY
}
